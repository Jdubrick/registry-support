// Copyright Red Hat
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4. **DO NOT EDIT**
package server // ServerInterface represents all server handlers.
import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

type ServerInterface interface {

	// (DELETE /)
	DeleteRootEndpoint(c *gin.Context)
	// Root endpoint of registry server.
	// (GET /)
	ServeRootEndpoint(c *gin.Context)

	// (POST /)
	PostRootEndpoint(c *gin.Context)

	// (PUT /)
	PutRootEndpoint(c *gin.Context)

	// (DELETE /devfiles/{stack})
	DeleteDevfile(c *gin.Context, stack string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack})
	ServeDevfile(c *gin.Context, stack string, params ServeDevfileParams)

	// (POST /devfiles/{stack})
	PostDevfile(c *gin.Context, stack string)

	// (PUT /devfiles/{stack})
	PutDevfile(c *gin.Context, stack string)

	// (DELETE /devfiles/{stack}/starter-projects/{starterProject})
	DeleteDevfileStarterProject(c *gin.Context, stack string, starterProject string)
	// Fetches starter project by stack and project name
	// (GET /devfiles/{stack}/starter-projects/{starterProject})
	ServeDevfileStarterProject(c *gin.Context, stack string, starterProject string, params ServeDevfileStarterProjectParams)

	// (POST /devfiles/{stack}/starter-projects/{starterProject})
	PostDevfileStarterProject(c *gin.Context, stack string, starterProject string)

	// (PUT /devfiles/{stack}/starter-projects/{starterProject})
	PutDevfileStarterProject(c *gin.Context, stack string, starterProject string)

	// (DELETE /devfiles/{stack}/{version})
	DeleteDevfileWithVersion(c *gin.Context, stack string, version string)
	// Get devfile by stack name.
	// (GET /devfiles/{stack}/{version})
	ServeDevfileWithVersion(c *gin.Context, stack string, version string, params ServeDevfileWithVersionParams)

	// (POST /devfiles/{stack}/{version})
	PostDevfileWithVersion(c *gin.Context, stack string, version string)

	// (PUT /devfiles/{stack}/{version})
	PutDevfileWithVersion(c *gin.Context, stack string, version string)

	// (DELETE /devfiles/{stack}/{version}/starter-projects/{starterProject})
	DeleteDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)
	// Fetches starter project by stack name, stack version, and project name
	// (GET /devfiles/{stack}/{version}/starter-projects/{starterProject})
	ServeDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string, params ServeDevfileStarterProjectWithVersionParams)

	// (POST /devfiles/{stack}/{version}/starter-projects/{starterProject})
	PostDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)

	// (PUT /devfiles/{stack}/{version}/starter-projects/{starterProject})
	PutDevfileStarterProjectWithVersion(c *gin.Context, stack string, version string, starterProject string)

	// (DELETE /health)
	DeleteHealthCheck(c *gin.Context)
	// Get health status.
	// (GET /health)
	ServeHealthCheck(c *gin.Context)

	// (POST /health)
	PostHealthCheck(c *gin.Context)

	// (PUT /health)
	PutHealthCheck(c *gin.Context)

	// (DELETE /index)
	DeleteDevfileIndexV1(c *gin.Context)
	// Gets index schemas of the stack devfiles.
	// (GET /index)
	ServeDevfileIndexV1(c *gin.Context, params ServeDevfileIndexV1Params)

	// (POST /index)
	PostDevfileIndexV1(c *gin.Context)

	// (PUT /index)
	PutDevfileIndexV1(c *gin.Context)

	// (DELETE /index/{indexType})
	DeleteDevfileIndexV1WithType(c *gin.Context, indexType string)
	// Gets index schemas of the devfiles of specific type.
	// (GET /index/{indexType})
	ServeDevfileIndexV1WithType(c *gin.Context, indexType string, params ServeDevfileIndexV1WithTypeParams)

	// (POST /index/{indexType})
	PostDevfileIndexV1WithType(c *gin.Context, indexType string)

	// (PUT /index/{indexType})
	PutDevfileIndexV1WithType(c *gin.Context, indexType string)

	// (DELETE /v2index)
	DeleteDevfileIndexV2(c *gin.Context)
	// Gets V2 index schemas of the stack devfiles.
	// (GET /v2index)
	ServeDevfileIndexV2(c *gin.Context, params ServeDevfileIndexV2Params)

	// (POST /v2index)
	PostDevfileIndexV2(c *gin.Context)

	// (PUT /v2index)
	PutDevfileIndexV2(c *gin.Context)

	// (DELETE /v2index/{indexType})
	DeleteDevfileIndexV2WithType(c *gin.Context, indexType string)
	// Gets V2 index schemas of the devfiles of specific type.
	// (GET /v2index/{indexType})
	ServeDevfileIndexV2WithType(c *gin.Context, indexType string, params ServeDevfileIndexV2WithTypeParams)

	// (POST /v2index/{indexType})
	PostDevfileIndexV2WithType(c *gin.Context, indexType string)

	// (PUT /v2index/{indexType})
	PutDevfileIndexV2WithType(c *gin.Context, indexType string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) DeleteRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRootEndpoint(c)
}

// ServeRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) ServeRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeRootEndpoint(c)
}

// PostRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PostRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRootEndpoint(c)
}

// PutRootEndpoint operation middleware
func (siw *ServerInterfaceWrapper) PutRootEndpoint(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutRootEndpoint(c)
}

// DeleteDevfile operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfile(c, stack)
}

// ServeDevfile operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfile(c, stack, params)
}

// PostDevfile operation middleware
func (siw *ServerInterfaceWrapper) PostDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfile(c, stack)
}

// PutDevfile operation middleware
func (siw *ServerInterfaceWrapper) PutDevfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfile(c, stack)
}

// DeleteDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileStarterProject(c, stack, starterProject)
}

// ServeDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileStarterProjectParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProject(c, stack, starterProject, params)
}

// PostDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileStarterProject(c, stack, starterProject)
}

// PutDevfileStarterProject operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileStarterProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileStarterProject(c, stack, starterProject)
}

// DeleteDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileWithVersion(c, stack, version)
}

// ServeDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileWithVersionParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileWithVersion(c, stack, version, params)
}

// PostDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileWithVersion(c, stack, version)
}

// PutDevfileWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileWithVersion(c, stack, version)
}

// DeleteDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// ServeDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileStarterProjectWithVersionParams

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileStarterProjectWithVersion(c, stack, version, starterProject, params)
}

// PostDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// PutDevfileStarterProjectWithVersion operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileStarterProjectWithVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "stack" -------------
	var stack string

	err = runtime.BindStyledParameter("simple", false, "stack", c.Param("stack"), &stack)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stack: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameter("simple", false, "version", c.Param("version"), &version)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "starterProject" -------------
	var starterProject string

	err = runtime.BindStyledParameter("simple", false, "starterProject", c.Param("starterProject"), &starterProject)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProject: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileStarterProjectWithVersion(c, stack, version, starterProject)
}

// DeleteHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) DeleteHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteHealthCheck(c)
}

// ServeHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) ServeHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeHealthCheck(c)
}

// PostHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) PostHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostHealthCheck(c)
}

// PutHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) PutHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutHealthCheck(c)
}

// DeleteDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV1(c)
}

// ServeDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1Params

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lastModified" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastModified", c.Request.URL.Query(), &params.LastModified)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lastModified: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1(c, params)
}

// PostDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV1(c)
}

// PutDevfileIndexV1 operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV1(c)
}

// DeleteDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV1WithType(c, indexType)
}

// ServeDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV1WithTypeParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lastModified" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastModified", c.Request.URL.Query(), &params.LastModified)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lastModified: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV1WithType(c, indexType, params)
}

// PostDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV1WithType(c, indexType)
}

// PutDevfileIndexV1WithType operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV1WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV1WithType(c, indexType)
}

// DeleteDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV2(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV2(c)
}

// ServeDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2Params

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minVersion", c.Request.URL.Query(), &params.MinVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxVersion", c.Request.URL.Query(), &params.MaxVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "default" -------------

	err = runtime.BindQueryParameter("form", true, false, "default", c.Request.URL.Query(), &params.Default)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter default: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "commandGroups" -------------

	err = runtime.BindQueryParameter("form", true, false, "commandGroups", c.Request.URL.Query(), &params.CommandGroups)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commandGroups: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deploymentScopes" -------------

	err = runtime.BindQueryParameter("form", true, false, "deploymentScopes", c.Request.URL.Query(), &params.DeploymentScopes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentScopes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lastModified" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastModified", c.Request.URL.Query(), &params.LastModified)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lastModified: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2(c, params)
}

// PostDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV2(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV2(c)
}

// PutDevfileIndexV2 operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV2(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV2(c)
}

// DeleteDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteDevfileIndexV2WithType(c, indexType)
}

// ServeDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) ServeDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServeDevfileIndexV2WithTypeParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "displayName" -------------

	err = runtime.BindQueryParameter("form", true, false, "displayName", c.Request.URL.Query(), &params.DisplayName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter displayName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "attributeNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "attributeNames", c.Request.URL.Query(), &params.AttributeNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attributeNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "arch" -------------

	err = runtime.BindQueryParameter("form", true, false, "arch", c.Request.URL.Query(), &params.Arch)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter arch: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "icon" -------------

	err = runtime.BindQueryParameter("form", true, false, "icon", c.Request.URL.Query(), &params.Icon)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter icon: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "iconUri" -------------

	err = runtime.BindQueryParameter("form", true, false, "iconUri", c.Request.URL.Query(), &params.IconUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter iconUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projectType" -------------

	err = runtime.BindQueryParameter("form", true, false, "projectType", c.Request.URL.Query(), &params.ProjectType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "language" -------------

	err = runtime.BindQueryParameter("form", true, false, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minVersion", c.Request.URL.Query(), &params.MinVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxVersion", c.Request.URL.Query(), &params.MaxVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "minSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "minSchemaVersion", c.Request.URL.Query(), &params.MinSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter minSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "maxSchemaVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxSchemaVersion", c.Request.URL.Query(), &params.MaxSchemaVersion)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter maxSchemaVersion: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deprecated" -------------

	err = runtime.BindQueryParameter("form", true, false, "deprecated", c.Request.URL.Query(), &params.Deprecated)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deprecated: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "default" -------------

	err = runtime.BindQueryParameter("form", true, false, "default", c.Request.URL.Query(), &params.Default)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter default: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "resources" -------------

	err = runtime.BindQueryParameter("form", true, false, "resources", c.Request.URL.Query(), &params.Resources)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter resources: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "starterProjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "starterProjects", c.Request.URL.Query(), &params.StarterProjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter starterProjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "linkNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "linkNames", c.Request.URL.Query(), &params.LinkNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "links" -------------

	err = runtime.BindQueryParameter("form", true, false, "links", c.Request.URL.Query(), &params.Links)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter links: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "commandGroups" -------------

	err = runtime.BindQueryParameter("form", true, false, "commandGroups", c.Request.URL.Query(), &params.CommandGroups)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter commandGroups: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "deploymentScopes" -------------

	err = runtime.BindQueryParameter("form", true, false, "deploymentScopes", c.Request.URL.Query(), &params.DeploymentScopes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentScopes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteNames" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteNames", c.Request.URL.Query(), &params.GitRemoteNames)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteNames: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemotes" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemotes", c.Request.URL.Query(), &params.GitRemotes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemotes: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitUrl", c.Request.URL.Query(), &params.GitUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRemoteName" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRemoteName", c.Request.URL.Query(), &params.GitRemoteName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRemoteName: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitSubDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitSubDir", c.Request.URL.Query(), &params.GitSubDir)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitSubDir: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gitRevision" -------------

	err = runtime.BindQueryParameter("form", true, false, "gitRevision", c.Request.URL.Query(), &params.GitRevision)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gitRevision: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "supportUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "supportUrl", c.Request.URL.Query(), &params.SupportUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter supportUrl: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lastModified" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastModified", c.Request.URL.Query(), &params.LastModified)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lastModified: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ServeDevfileIndexV2WithType(c, indexType, params)
}

// PostDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) PostDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostDevfileIndexV2WithType(c, indexType)
}

// PutDevfileIndexV2WithType operation middleware
func (siw *ServerInterfaceWrapper) PutDevfileIndexV2WithType(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexType" -------------
	var indexType string

	err = runtime.BindStyledParameter("simple", false, "indexType", c.Param("indexType"), &indexType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexType: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutDevfileIndexV2WithType(c, indexType)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/", wrapper.DeleteRootEndpoint)

	router.GET(options.BaseURL+"/", wrapper.ServeRootEndpoint)

	router.POST(options.BaseURL+"/", wrapper.PostRootEndpoint)

	router.PUT(options.BaseURL+"/", wrapper.PutRootEndpoint)

	router.DELETE(options.BaseURL+"/devfiles/:stack", wrapper.DeleteDevfile)

	router.GET(options.BaseURL+"/devfiles/:stack", wrapper.ServeDevfile)

	router.POST(options.BaseURL+"/devfiles/:stack", wrapper.PostDevfile)

	router.PUT(options.BaseURL+"/devfiles/:stack", wrapper.PutDevfile)

	router.DELETE(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.DeleteDevfileStarterProject)

	router.GET(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.ServeDevfileStarterProject)

	router.POST(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.PostDevfileStarterProject)

	router.PUT(options.BaseURL+"/devfiles/:stack/starter-projects/:starterProject", wrapper.PutDevfileStarterProject)

	router.DELETE(options.BaseURL+"/devfiles/:stack/:version", wrapper.DeleteDevfileWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version", wrapper.ServeDevfileWithVersion)

	router.POST(options.BaseURL+"/devfiles/:stack/:version", wrapper.PostDevfileWithVersion)

	router.PUT(options.BaseURL+"/devfiles/:stack/:version", wrapper.PutDevfileWithVersion)

	router.DELETE(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.DeleteDevfileStarterProjectWithVersion)

	router.GET(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.ServeDevfileStarterProjectWithVersion)

	router.POST(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.PostDevfileStarterProjectWithVersion)

	router.PUT(options.BaseURL+"/devfiles/:stack/:version/starter-projects/:starterProject", wrapper.PutDevfileStarterProjectWithVersion)

	router.DELETE(options.BaseURL+"/health", wrapper.DeleteHealthCheck)

	router.GET(options.BaseURL+"/health", wrapper.ServeHealthCheck)

	router.POST(options.BaseURL+"/health", wrapper.PostHealthCheck)

	router.PUT(options.BaseURL+"/health", wrapper.PutHealthCheck)

	router.DELETE(options.BaseURL+"/index", wrapper.DeleteDevfileIndexV1)

	router.GET(options.BaseURL+"/index", wrapper.ServeDevfileIndexV1)

	router.POST(options.BaseURL+"/index", wrapper.PostDevfileIndexV1)

	router.PUT(options.BaseURL+"/index", wrapper.PutDevfileIndexV1)

	router.DELETE(options.BaseURL+"/index/:indexType", wrapper.DeleteDevfileIndexV1WithType)

	router.GET(options.BaseURL+"/index/:indexType", wrapper.ServeDevfileIndexV1WithType)

	router.POST(options.BaseURL+"/index/:indexType", wrapper.PostDevfileIndexV1WithType)

	router.PUT(options.BaseURL+"/index/:indexType", wrapper.PutDevfileIndexV1WithType)

	router.DELETE(options.BaseURL+"/v2index", wrapper.DeleteDevfileIndexV2)

	router.GET(options.BaseURL+"/v2index", wrapper.ServeDevfileIndexV2)

	router.POST(options.BaseURL+"/v2index", wrapper.PostDevfileIndexV2)

	router.PUT(options.BaseURL+"/v2index", wrapper.PutDevfileIndexV2)

	router.DELETE(options.BaseURL+"/v2index/:indexType", wrapper.DeleteDevfileIndexV2WithType)

	router.GET(options.BaseURL+"/v2index/:indexType", wrapper.ServeDevfileIndexV2WithType)

	router.POST(options.BaseURL+"/v2index/:indexType", wrapper.PostDevfileIndexV2WithType)

	router.PUT(options.BaseURL+"/v2index/:indexType", wrapper.PutDevfileIndexV2WithType)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//+adPhkbIIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
